@using HuntStats.State
@using System.ComponentModel
@using System.Diagnostics
@using Dapper
@using Dommel
@using HuntStats.Data
@using HuntStats.Features
@using HuntStats.Models
@using MediatR
@inherits LayoutComponentBase
@inject AppState _appState;
@inject IDbConnectionFactory _connectionFactory;
@inject IMediator _mediator
@inject IJSRuntime JS

<div class="page" @onmousedown="_appState.ClickedOutside">
    <div class="sidebar">
        <div class="top-menu">
            HuntStats
        </div>
        <div class="bottom-menu">
            <NavMenu/>
        </div>
    </div>
    <div class="sidebar-placeholder">
        
    </div>

    <main>
        <div class="top-content">
            <div class="right-content">
                @if (Path == null || Path == string.Empty)
                {
                    <button disabled class="btn btn-primary disabled">
                        Please check ur settings...
                    </button>
                }
                else
                {
                    @if (worker.CancellationPending)
                    {
                        <button disabled class="btn btn-primary disabled">
                            Stopping background worker...
                        </button>
                    }
                    else
                    {
                        @if (!worker.IsBusy)
                        {
                            <button @onclick="ToggleCheck" class="btn btn-primary">
                                Start background worker
                            </button>
                        }
                        else
                        {
                            <button @onclick="ToggleCheck" class="btn btn-primary">
                                Stop background worker
                            </button>
                        }
                    }
                }
            </div>
        </div>

        <div class="bottom-content">
                @Body
        </div>
    </main>
</div>


@code {
    private BackgroundWorker worker;
    public string Path { get; set; }
    private bool _navState;
    private string _userMail;
    private Boolean _sidebarClosed = false;
    private Boolean _mobileSidebarOpen = false;

    public string SidebarClass()
    {
        if (_sidebarClosed) return "closed";
        return "";
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("RemoveLoading");
        }
    }

    public void ToggleSidebar()
    {
        _sidebarClosed = !_sidebarClosed;
        StateHasChanged();
    }
    
    public async Task ToggleCheck()
    {
        if (!worker.CancellationPending)
        {
            if (worker.IsBusy)
            {
                Debug.WriteLine("Stopping background worker...");
                worker.CancelAsync();
            }
            else
            {
                Debug.WriteLine("Starting background worker...");
                worker.RunWorkerAsync();
            }
        }
        // StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var appdataDirectory = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\HuntStats";
        if(!Directory.Exists(appdataDirectory)) Directory
            .CreateDirectory(appdataDirectory);
        await _mediator.Send(new InitializeDatabaseCommand());
        _appState.CloseSidebarEvent += ToggleSidebar;
        _appState.PathChangedEvent += AppStateOnPathChangedEvent;
        var settings = (await _mediator.Send(new GetSettingsCommand()));
        Path = settings.Path;
        ConstructWorker();
        var con = await _connectionFactory.GetOpenConnectionAsync();
        if (settings.StartWorkerOnBoot)
        {
            worker.RunWorkerAsync();
        }
    }

    private async void AppStateOnPathChangedEvent(string obj)
    {
        Path = obj;
        if (worker != null)
        {
            if (!File.Exists(Path + @"\user\profiles\default\attributes.xml"))
            {
                if (!worker.CancellationPending && worker.IsBusy) worker.CancelAsync();
            }
        }
        await InvokeAsync(StateHasChanged);
    }

    private void ConstructWorker()
    {
        worker = new BackgroundWorker();
        worker.RunWorkerCompleted += WorkerOnRunWorkerCompleted;
        worker.DoWork += WorkerOnDoWork;
        worker.WorkerSupportsCancellation = true;
        InvokeAsync(StateHasChanged);
    }

    private void WorkerOnRunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
    {
        if (e.Cancelled)
        {
            StateHasChanged();
        }
    }

    private void WorkerOnDoWork(object sender, DoWorkEventArgs e)
    {
        while (!worker.CancellationPending)
        {
            Thread.Sleep(10*1000);
            var result = Task.Run(() => { _mediator.Send(new XmlFileQuery()); });
        }
        Debug.WriteLine("Background worker should have stopped at this moment...");
        ConstructWorker();
    }
}