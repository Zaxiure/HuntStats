@using Microsoft.JSInterop
@using HuntStats.State
@inject IJSRuntime JS;
@inject AppState _appstate
@implements IDisposable
<div @onmousedown:stopPropagation="true" class="dropdown-container">
    @{
        if (DropdownClickable != null)
        {
            <div @ref="_clickWrapper" @onmousedown="toggleDropdown" class="click-wrapper">
                @DropdownClickable(_dropdownOpened.ToString())
            </div>
        }
    }

    <div @ref="_dropdownElement" class="dropdown shadow @(AlternateStyle ? "alternate" : "") @(RemoveMargin ? "no-margin" : "") @getDropdownClass()">
        @{
            if (DropdownContent != null)
            {
                @DropdownContent
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public RenderFragment<string>? DropdownClickable { get; set; }
    
    [Parameter]
    public RenderFragment? DropdownContent { get; set; }
    
    [Parameter]
    public bool RemoveMargin { get; set; }
    
    [Parameter]
    public bool AlternateStyle { get; set; }

    [Parameter]
    public EventCallback DropdownOpened { get; set; } = new EventCallback();

    private ElementReference _clickWrapper;
    private ElementReference _dropdownElement;

    private string? _uniqueId;
    private Boolean _initialized = false;
    private Boolean _dropdownOpened = false;
    private Boolean _stopAnimation = false;

    private string getDropdownClass()
    {
        var returnClass = "";
        if (_dropdownOpened) returnClass += "opened";
        if (_initialized) returnClass += " loaded";
        if (_stopAnimation) returnClass += " stopanim";
        return returnClass;
    }
    
    private async Task toggleDropdown()
    {
        _dropdownOpened = !_dropdownOpened;
        if(_dropdownOpened)
        {
            _appstate.OpenedDropdown(_uniqueId);
            await DropdownOpened.InvokeAsync();
        };
        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("createDropdown", _clickWrapper, _dropdownElement);
            _stopAnimation = true;
            _initialized = true;
            StateHasChanged();
            await Task.Delay(100);
            StateHasChanged();
            await Task.Delay(1200);
            _stopAnimation = false;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _uniqueId = Guid.NewGuid().ToString();
        _appstate.CloseOpenedDropdownEvent += AppstateOnCloseOpenedDropdownEvent;;
        _appstate.OpenedDropdownEvent += AppstateDropdownOpened;
        _appstate.ClickOutside += AppstateOnClickOutside;
    }

    public void Dispose()
    {
        _appstate.CloseOpenedDropdownEvent -= AppstateOnCloseOpenedDropdownEvent;
        _appstate.OpenedDropdownEvent -= AppstateDropdownOpened;
        _appstate.ClickOutside -= AppstateOnClickOutside;
    }

    private void AppstateOnCloseOpenedDropdownEvent()
    {
        if (_uniqueId == _appstate.OpenedUniqueId)
        {
            _dropdownOpened = false;
        }
    }

    private void AppstateDropdownOpened()
    {
        if (_appstate.LastOpenedUniqueId == _uniqueId && _appstate.OpenedUniqueId != _uniqueId)
        {
            _dropdownOpened = false;
        }
        StateHasChanged();
    }

    private void AppstateOnClickOutside(MouseEventArgs mouseEventArgs)
    {
        _dropdownOpened = false;
        StateHasChanged();
    }
}