<ul class="pagination">
    <li class="page-item">
        <a class="page-link" @onclick="PrevPage">
            <i class="far fa-chevron-left"></i>
        </a>
    </li>


    @foreach (var page in GeneratedPagination)
    {
        if (page != -1)
        {
            if (CurrentPage != page)
            {
                <li class="page-item">
                    <a class="page-link" @onclick="() => { SetPage(page); }">@(page)</a>
                </li>
            }
            else
            {
                <li class="page-item">
                    <a class="page-link active">@(page)</a>
                </li>
            }
        }
        else
        {
            <li class="page-item">
                <a class="page-link" disabled>...</a>
            </li>
        }
    }


    <li class="page-item">
        <a class="page-link" @onclick="NextPage">
            <i class="far fa-chevron-right"></i>
        </a>
    </li>
</ul>

@code {

    [Parameter]
    public EventCallback<int> OnPageChange { get; set; }

    [Parameter]
    public int TotalPages { get; set; } = 10;

    [Parameter]
    public int Padding { get; set; } = 2;

    [Parameter]
    public int PaddingInside { get; set; } = 2;

    [Parameter]
    public int CurrentPage { get; set; } = 1;

    private IEnumerable<int> GeneratedPagination { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        GeneratedPagination = GeneratePagination();
    }

    private void SetPage(int page)
    {
        CurrentPage = page;
        GeneratedPagination = GeneratePagination();
        OnPageChange.InvokeAsync(CurrentPage);
    }

    private void NextPage()
    {
        if (CurrentPage != TotalPages)
        {
            CurrentPage += 1;
            GeneratedPagination = GeneratePagination();
            OnPageChange.InvokeAsync(CurrentPage);
        }
    }

    private void PrevPage()
    {
        if (CurrentPage != 1)
        {
            CurrentPage -= 1;
            GeneratedPagination = GeneratePagination();
            OnPageChange.InvokeAsync(CurrentPage);
        }
    }

    private IEnumerable<int> GeneratePagination()
    {
        if (TotalPages <= 4 || TotalPages <= 2 * Padding + PaddingInside + 2)
            return Enumerable.Range(1, TotalPages).ToArray();

        var length = 2 * Padding + PaddingInside + 2;
        var pages = new int[length];

        for (var i = 0; i < Padding; i++)
        {
            pages[i] = i + 1;
        }

        for (var i = 0; i < Padding; i++)
        {
            pages[length - i - 1] = TotalPages - i;
        }

        var startValue = 0;
        if (CurrentPage <= Padding + PaddingInside / 2 + 1)
            startValue = Padding + 2;
        else if (CurrentPage >= TotalPages - Padding - PaddingInside / 2)
            startValue = TotalPages - Padding - PaddingInside;
        else
            startValue = CurrentPage - PaddingInside / 2;

        for (var i = 0; i < PaddingInside; i++)
        {
            pages[Padding + 1 + i] = startValue + i;
        }

        pages[Padding] = Padding + PaddingInside / 2 + 1 < CurrentPage ? -1 : Padding + 1;

        pages[length - Padding - 1] = TotalPages - Padding - PaddingInside / 2 > CurrentPage ? -1 : TotalPages - Padding;

        for (var i = 0; i < length - 2; i++)
        {
            if (pages[i] + 2 == pages[i + 2])
                pages[i + 1] = pages[i] + 1;
        }

        return pages;
    }

}