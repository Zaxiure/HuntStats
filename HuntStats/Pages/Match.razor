@page "/match/{Id:int}"
@using MediatR
@using HuntStats.Models
@using HuntStats.Extensions
@using HuntStats.Features
@inject IMediator Mediator
@inject IFolderPicker FolderPicker
@inject NavigationManager NavigationManager

<div class="card-container" style="margin: auto;">
    <div class="d-flex justify-content-between mb-3">
        <div class="left">
            <h3>Match: @HuntMatch.DateTime.ToLocalTime().ToString("dd-MM-yyyy HH:mm:ss")</h3>
        </div>
        <div class="right">
            <div class="btn btn-primary" @onclick='() => { NavigationManager.NavigateTo("/match"); }'>Back</div>
        </div>
    </div>
    <div class="match-container d-flex flex-xl-row flex-column">
        <div class="card col me-xl-2 overflow-y-auto" style="overflow-y:auto;overflow-x:hidden;max-height: calc(100vh - 250px)">
            <div class="card-body">
                @* <div class="teams"> *@
                @*     <div class="d-flex flex-row pt-4 flex-wrap"> *@
                @*         $1$ @foreach (var team in HuntMatch.Teams) #1# *@
                @*         $1$ { #1# *@
                @*         $1$     <div @onclick="() => { Team = team; }" class="btn btn-primary ms-3 mb-3 flex-shrink-0">Team @(HuntMatch.Teams.IndexOf(team)+1)@(team.Players.FirstOrDefault(x => x.ProfileId.ToString() == Settings.PlayerProfileId) != null ? " (Own Team)" : "")</div> #1# *@
                @*         $1$ } #1# *@
                @*     </div> *@
                @* </div> *@
                <div class="team-container">
                    @foreach (var team in HuntMatch.Teams)
                    {
                        
                        <div class="team-title">
                            Team #@(HuntMatch.Teams.IndexOf(team) + 1)
                        </div>
                        <small class="d-block" style="padding:5px 15px">
                            @{
                                Mmr = team.Players.Select(x => x.Mmr).Sum() / team.Players.Count();
                            }
                            Team MMR:
                            @for (int i = 0; i < Mmr.ToStarRating(); i++)
                            {
                                <i class="fas fa-star"></i>
                            }
                            @for (int i = 0; i < (6 - Mmr.ToStarRating()); i++)
                            {
                                <i class="far fa-star"></i>
                            }
                            (@Mmr)
                        </small>
                        @foreach (var player in team.Players)
                        {
                            <div class="team d-flex flex-row">
                                <div class="team-player text-nowrap overflow-hidden" style="width: 200px;">
                                    @player.Name
                                </div>
                                @if (Settings.PlayerProfileId == null || Settings.PlayerProfileId == string.Empty)
                                {
                                    if (player.ProfileId != "0")
                                    {
                                        <div @onclick="() => { UpdateProfile(player.ProfileId.ToString()); }" class="btn btn-primary team-player" style="border-radius: 0 !important; border-width: 1px">
                                            This is me!
                                        </div>
                                    }
                                }
                                <div class="team-player">
                                    @for (int i = 0; i < @player.StarRating(); i++)
                                    {
                                        <i class="fas fa-star"></i>
                                    }
                                    @for (int i = 0; i < (6 - player.StarRating()); i++)
                                    {
                                        <i class="far fa-star"></i>
                                    }
                                    (@player.Mmr)
                                </div>
                                @for (int i = 0; i < player.DownedByMe; i++)
                                {
                                    <Tooltip Text="You downed this hunter.">
                                        <div class="team-player">
                                            <i class="fas fa-skull"></i>
                                        </div>
                                    </Tooltip>
                                }
                                @for (int i = 0; i < player.DownedByTeammate; i++)
                                {
                                    <Tooltip Text="Your teammate downed this hunter.">
                                        <div class="team-player blue-background">
                                            <i class="fas fa-skull"></i>
                                        </div>
                                    </Tooltip>
                                }
                                @for (int i = 0; i < player.DownedMe; i++)
                                {
                                    <Tooltip Text="This hunter downed you">
                                        <div class="team-player">
                                            <i class="fas fa-tombstone"></i>
                                        </div>
                                    </Tooltip>
                                }
                                @for (int i = 0; i < player.DownedTeammate; i++)
                                {
                                    <Tooltip Text="This hunter downed your teammate.">
                                        <div class="team-player blue-background">
                                            <i class="fas fa-tombstone"></i>
                                        </div>
                                    </Tooltip>
                                }
                                @for (int i = 0; i < player.KilledByMe; i++)
                                {
                                    <Tooltip Text="You killed this hunter.">
                                        <div class="team-player">
                                            <i class="fas fa-skull" style="color: #ff0000; fill: #ff0000;"></i>
                                        </div>
                                    </Tooltip>
                                }
                                @for (int i = 0; i < player.KilledByTeammate; i++)
                                {
                                    <Tooltip Text="Your teammate killed this hunter.">
                                        <div class="team-player blue-background">
                                            <i class="fas fa-skull" style="color: #ff0000; fill: #ff0000;"></i>
                                        </div>
                                    </Tooltip>
                                }
                                @for (int i = 0; i < player.KilledMe; i++)
                                {
                                    <Tooltip Text="This hunter killed you.">
                                        <div class="team-player">
                                            <i class="fas fa-tombstone" style="color: #ff0000; fill: #ff0000;"></i>
                                        </div>
                                    </Tooltip>
                                }
                                @for (int i = 0; i < player.KilledTeammate; i++)
                                {
                                    <Tooltip Text="This hunter killed your teammate.">
    
                                        <div class="team-player blue-background">
                                            <i class="fas fa-tombstone" style="color: #ff0000; fill: #ff0000;"></i>
                                        </div>
                                    </Tooltip>
                                }
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
           <div class="card col mt-4 mt-xl-0 ms-xl-2" style="overflow-y:auto;overflow-x:hidden;max-height: calc(100vh - 250px)">
            @if (HuntMatch != null)
            {
                <div class="card-body">
                    <div class="totals">
                        @if (HuntMatch.Spider)
                        {
                            <div class="kills">
                                <i class="far fa-spider"></i>
                            </div>
                        }
                        @if (HuntMatch.Assassin)
                        {
                            <div class="kills">
                                <i class="far fa-scalpel"></i>
                            </div>
                        }
                        @if (HuntMatch.Butcher)
                        {
                            <div class="kills">
                                <i class="far fa-pig"></i>
                            </div>
                        }
                        @if (HuntMatch.Scrapbeak)
                        {
                            <div class="kills">
                                <i class="far fa-crow"></i>
                            </div>
                        }
                        <div class="kills">
                            Total kills: @Kills
                        </div>
                        <div class="kills">
                            Your Kills: @YourKills
                        </div>
                        <div class="assists">
                            Kill Assists: @Assists
                        </div>
                        <div class="deaths">
                            Deaths: @Deaths
                        </div>
                        <div class="deaths">
                            @{
                                var Xp = 0;
                                Xp += Accolades.Select(x => x.Bounty).Sum() * 4;
                                Xp += Accolades.Select(x => x.Xp).Sum();
                            }
                            Xp: @Xp
                        </div>
                        <div class="deaths">
                            Hunt Dollars: @HuntDollars
                        </div>
                        @if (EventPoints != null)
                        {
                            <div class="eventpoints">
                                Event Points: @EventPoints
                            </div>
                        }
                        <div class="deaths">
                            @{
                                Mmr = HuntMatch.Teams.Select(x => x.Players.Select(x => x.Mmr).Sum() / x.Players.Count()).Sum() / HuntMatch.Teams.Count;
                            }
                            Match MMR:
                            @for (int i = 0; i < Mmr.ToStarRating(); i++)
                            {
                                <i class="fas fa-star"></i>
                            }
                            @for (int i = 0; i < (6 - Mmr.ToStarRating()); i++)
                            {
                                <i class="far fa-star"></i>
                            }
                            (@Mmr)
                        </div>
                    </div>
                    <div class="xptable">
                        <div class="table-wrapper mt-2">
                            <table class="table table-dark data-table table-hover" style="margin-bottom: 0 !important;">
                                <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Amount</th>
                                    <th>Xp</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var boss in Bosses)
                                {
                                    var clueEntry = Entries.Where(x => x.Category == "accolade_clues_found" && x.DescriptorName.Contains(boss));
                                    @if (clueEntry.Count() != 0)
                                    {
                                        <tr>
                                            <td>
                                                Clue @boss found
                                            </td>
                                            <td>
                                                @clueEntry.Count()
                                            </td>
                                            <td>
                                                @(clueEntry.Select(x => x.RewardSize).Sum() * 4)
                                            </td>
                                        </tr>
                                    }
                                    @foreach (var entry in Entries.Where(x => x.Category.Contains(boss)))
                                    {
                                        <tr>
                                            <td>
                                                @entry.DescriptorName.FirstLetterUpper()
                                            </td>
                                            <td>
                                                @entry.Amount
                                            </td>
                                            <td>
                                                @(!entry.Category.Contains("banished") ? entry.RewardSize * 4 : entry.RewardSize)
                                            </td>
                                        </tr>
                                    }
                                }
                                @foreach (var entry in Entries.Where(x => x.Category == "accolade_monsters_killed"))
                                {
                                    <tr>
                                        <td>
                                            @entry.DescriptorName.FirstLetterUpper()
                                        </td>
                                        <td>
                                            @entry.Amount
                                        </td>
                                        <td>
                                            @entry.RewardSize
                                        </td>
                                    </tr>
                                }
                                @foreach (var entry in Entries.Where(x => x.Category == "accolade_players_killed"))
                                {
                                    <tr>
                                        <td>
                                            Kill @entry.DescriptorName.Split(" ")[4] star player
                                        </td>
                                        <td>
                                            @entry.Amount
                                        </td>
                                        <td>
                                            @entry.RewardSize
                                        </td>
                                    </tr>
                                }
                                @foreach (var entry in RemainingEntries)
                                {
                                    if (entry.RewardSize != 0)
                                    {
                                        <tr>
                                            <td>
                                                @entry.DescriptorName.FirstLetterUpper()
                                            </td>
                                            <td>
                                                @entry.Amount
                                            </td>
                                            <td>
                                                @if (entry.Category == "accolade_trophy_extraction_bonus")
                                                {
                                                    @(entry.RewardSize*4)
                                                }
                                                else
                                                {
                                                    @entry.RewardSize
                                                }
                                            </td>
                                        </tr>
                                    }
                                }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int Id { get; set; }

    public HuntMatch HuntMatch { get; set; }

    public Team Team { get; set; }
    public Models.Settings Settings { get; set; }

    public List<Accolade> Accolades { get; set; }
    
    public List<HuntEntry> Entries { get; set; }

    public List<HuntEntry> RemainingEntries { get; set; }

    public List<string> Bosses { get; set; } = new List<string>();

    public int Mmr { get; set; }

    public int Kills { get; set; }

    public int Assists { get; set; } = 0;

    public int Deaths { get; set; }

    public int YourKills { get; set; }

    public int HuntDollars { get; set; } = 0;

    public int? EventPoints { get; set; } = null;


    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            HuntMatch = await Mediator.Send(new GetMatchbyIdCommand(Id));
            if(HuntMatch.Spider) Bosses.Add(nameof(HuntMatch.Spider).ToLower());
            if(HuntMatch.Assassin) Bosses.Add(nameof(HuntMatch.Assassin).ToLower());
            if(HuntMatch.Scrapbeak) Bosses.Add(nameof(HuntMatch.Scrapbeak).ToLower());
            if(HuntMatch.Butcher) Bosses.Add(nameof(HuntMatch.Butcher).ToLower());
            Team = HuntMatch.Teams[0];
            Accolades = await Mediator.Send((new GetAccoladesByMatchIdCommand(Id)));
            Entries = await Mediator.Send((new GetEntriesByMatchIdCommand(Id)));
            var huntDollars = 0;
            huntDollars += Accolades.Select(x => x.Bounty).Sum();
            var entry = Entries.FirstOrDefault(x => x.Category == "accolade_found_gold");
            if(entry != null)
            {
                huntDollars += entry.RewardSize;
            }
            HuntDollars = huntDollars;
            RemainingEntries = await Mediator.Send((new GetEntriesByMatchIdCommand(Id)));
            RemainingEntries.RemoveAll(x => x.Category == "accolade_monsters_killed" || x.Category == "accolade_hunter_points" || x.Category == "accolade_found_gold" || x.Category == "accolade_players_killed" || x.Category == "accolade_clues_found");
            foreach (var boss in Bosses)
            {
                RemainingEntries.RemoveAll(x => x.Category.Contains(boss));
            }
            Settings = await Mediator.Send(new GetSettingsCommand());
            Kills = HuntMatch.Teams.Select(x => x.Players.Select(y => y.KilledByMe + y.DownedByMe + y.KilledByTeammate + y.DownedByTeammate).Sum()).Sum();
            YourKills = HuntMatch.Teams.Select(x => x.Players.Select(y => y.KilledByMe + y.DownedByMe).Sum()).Sum();
            if (Accolades.FirstOrDefault(x => x.Category == "accolade_players_killed_assist") != null) Assists = Accolades.FirstOrDefault(x => x.Category == "accolade_players_killed_assist").Hits;
            Deaths = HuntMatch.Teams.Select(x => x.Players.Select(y => y.KilledMe + y.DownedMe).Sum()).Sum();
            if (Accolades.FirstOrDefault(x => x.Category == "accolade_gained_serpent2022_event_points") != null) EventPoints = Accolades.FirstOrDefault(x => x.Category == "accolade_gained_serpent2022_event_points").Hits;
        }
    }

    private async Task UpdateProfile(string profileId)
    {
        Settings.PlayerProfileId = profileId;
        await Mediator.Send(new UpdateSettingsCommand(Settings));
    }
}
