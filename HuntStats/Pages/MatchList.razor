@page "/match"
@using System.Diagnostics
@using System.ComponentModel
@using Dapper
@using Dommel
@using HuntStats.Data
@using HuntStats.Features
@using HuntStats.Models
@using HuntStats.State
@using MediatR
@inject IFolderPicker _folderPicker
@inject IDbConnectionFactory _connectionFactory;
@inject IMediator Mediator
@inject NavigationManager NavigationManager
@inject AppState AppState

<div class="card-container" style="">
    <h3>Matches</h3>
    <div class="card">
        <div class="card-body" style="">
            <DropdownSelect TValue="OrderType" ValueChanged="HandleOrderTypeChange" SearchDisabled="true" Value="OrderType" ListItems="ListItems"></DropdownSelect>
            <div class="table-wrapper mt-2">
                <table class="table table-dark data-table table-hover" style="margin-bottom: 0 !important;">
                    <thead>
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Date</th>
                        <th scope="col">Teams</th>
                        <th scope="col">Total Players</th>
                        <th scope="col">Xp</th>
                        <th scope="col">HuntDollars</th>
                        <th scope="col">KDA</th>
                        <th scope="col">Bosses</th>
                        @if (Settings.PlayerProfileId != null || Settings.PlayerProfileId != string.Empty || Settings.PlayerProfileId != "0")
                        {
                            <th>
                                MMR
                            </th>
                        }
                        <th width="150">Actions</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var match in MatchView.Matches)
                    {
                        <tr @onclick='() => { NavigationManager.NavigateTo("/match/" + match.Id); }'>
                            <th scope="row">@match.Id</th>
                            <td>@match.DateTime.ToLocalTime()</td>
                            <td>@match.Teams.Count</td>
                            <td>@match.Teams.Select(x => x.Players.Count).Sum()</td>
                            <td>
                                @{
                                    var Xp = 0;
                                    Xp += match.Accolades.Select(x => x.Bounty).Sum() * 4;
                                    Xp += match.Accolades.Select(x => x.Xp).Sum();
                                }
                                @(Xp)
                            </td>
                            <td>
                                @{
                                    var HuntDollars = 0;
                                    HuntDollars += match.Accolades.Select(x => x.Bounty).Sum();
                                    var entry = match.Entries.FirstOrDefault(x => x.Category == "accolade_found_gold");
                                    if (entry != null) HuntDollars += entry.RewardSize;
                                }
                                @(HuntDollars)
                            </td>
                            <td>
                                @{
                                    var Assists = 0;
                                    if (match.Accolades.FirstOrDefault(x => x.Category == "accolade_players_killed_assist") != null) Assists = match.Accolades.FirstOrDefault(x => x.Category == "accolade_players_killed_assist").Hits;
                                    var kda = ((double)(match.TotalKills + Assists) / match.TotalDeaths).ToString("#.##");
                                }
                                @if (match.TotalDeaths == 0)
                                {
                                    @(match.TotalKills + Assists)
                                }
                                else
                                {
                                    if ((match.TotalKills + Assists) == 0 && match.TotalDeaths > 0)
                                    {
                                        @("0")
                                    }
                                    else
                                    {
                                        @kda
                                    }
                                }
                            </td>
                            <td>
                                <div class="d-flex justify-content-around" style="font-size: 21px">
                                    @if (match.Spider)
                                    {
                                        <i class="far fa-spider"></i>
                                    }
                                    @if (match.Assassin)
                                    {
                                        <i class="far fa-scalpel"></i>
                                    }
                                    @if (match.Butcher)
                                    {
                                        <i class="far fa-pig"></i>
                                    }
                                    @if (match.Scrapbeak)
                                    {
                                        <i class="far fa-crow"></i>
                                    }
                                </div>
                            </td>
                            @if (Settings.PlayerProfileId != null || Settings.PlayerProfileId != string.Empty || Settings.PlayerProfileId != "0")
                            {
                                <td>
                                    @if (match.Teams.FirstOrDefault(x => x.Players.FirstOrDefault(y => y.ProfileId == Settings.PlayerProfileId) != null) != null)
                                    {
                                        @match.Teams.FirstOrDefault(x => x.Players.FirstOrDefault(y => y.ProfileId == Settings.PlayerProfileId) != null).Players.FirstOrDefault(x => x.ProfileId == Settings.PlayerProfileId).Mmr
                                    }
                                </td>
                            }
                            @if (DeleteMatches.Contains(match))
                            {
                                <td>
                                    <div @onclick:preventDefault="true" @onclick:stopPropagation="true" class="btn btn-primary" @onclick="async () => { await DeleteMatch(match); }" color="">
                                        <i class="fal fa-check" style="color: #C6EBC5;"></i>
                                    </div>
                                    <div @onclick:preventDefault="true" @onclick:stopPropagation="true" @onclick="() => { RemoveFromDelete(match); }" class="btn btn-primary" color="">
                                        <i class="fal fa-times" style="color: #F96666;"></i>
                                    </div>
                                </td>
                            }
                            else
                            {
                                <td>
                                    <div @onclick:preventDefault="true" @onclick:stopPropagation="true" @onclick='() => { NavigationManager.NavigateTo("/match/" + match.Id); }' class="btn btn-primary">
                                        <i class="fal fa-eye"></i>
                                    </div>
                                    <div @onclick:preventDefault="true" @onclick:stopPropagation="true" @onclick="() => { AddToDelete(match); }" class="btn btn-primary">
                                        <i class="fal fa-trash"></i>
                                    </div>
                                </td>
                            }
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
            <div class="dropdown-wrapper" style="position: absolute;right: 15px;bottom: 15px;width: 200px;">
                <DropdownSelect TValue="int" ValueChanged="HandlePageSizeChange" SearchDisabled="true" Value="PageSize" ListItems="ListItemsPageSize"></DropdownSelect>
            </div>
            <div class="pagination-wrapper mt-3" style="width: max-content; margin: auto;">
                <Pagination CurrentPage="Page" TotalPages="Convert.ToInt32(Math.Ceiling((Double)MatchView.Total / PageSize))" OnPageChange="PageChanged"></Pagination>
            </div>
        </div>
    </div>
</div>


@code {

    public OrderType OrderType { get; set; } = OrderType.Descending;

    public int Page { get; set; } = 1;

    public int PageSize { get; set; } = 10;

    public List<HuntMatch> DeleteMatches { get; set; } = new List<HuntMatch>();

    public List<DropdownSelect<OrderType>.ListItem> ListItems { get; set; } = new()
    {
        new()
        {
            Id = OrderType.Ascending,
            Variable = "Ascending"
        },
        new()
        {
            Id = OrderType.Descending,
            Variable = "Descending"
        }
    };
    public List<DropdownSelect<int>.ListItem> ListItemsPageSize { get; set; } = new()
    {
        new()
        {
            Id = 10,
            Variable = "10"
        },
        new()
        {
            Id = 25,
            Variable = "25"
        },
        new()
        {
            Id = 50,
            Variable = "50"
        },
        new()
        {
            Id = 100,
            Variable = "100"
        },
    };
    public MatchView MatchView;
    public BackgroundWorker worker { get; set; }
    public bool RunBackgroundTask { get; set; } = false;
    public string FilePath { get; set; }
    public string Path { get; set; } = "";
    public Models.Settings Settings { get; set; }

    private async Task DeleteMatch(HuntMatch match)
    {
        await Mediator.Send(new RemoveMatchByIdCommand(match.Id));
    }

    private void AddToDelete(HuntMatch match)
    {
        DeleteMatches.Add(match);
    }

    private void RemoveFromDelete(HuntMatch match)
    {
        DeleteMatches.Remove(match);
    }

    protected override async Task OnInitializedAsync()
    {
        AppState.NewMatchAdded += AppStateOnNewMatchAdded;
        OrderType = AppState.OrderType;
        Page = AppState.CurrentPage;
        PageSize = AppState.PageSize;
        await RefreshMatchList();
        Settings = await Mediator.Send(new GetSettingsCommand());
    }

    private async Task RefreshMatchList()
    {
        MatchView = await Mediator.Send(new GetMatchCommand()
        {
            OrderType = OrderType,
            Page = Page,
            PageSize = PageSize
        });
        AppState.OrderType = OrderType;
        AppState.CurrentPage = Page;
        AppState.PageSize = PageSize;
    }

    private async Task HandleOrderTypeChange(OrderType value)
    {
        OrderType = value;
        await RefreshMatchList();
    }
    
    private async Task HandlePageSizeChange(int value)
    {
        PageSize = value;
        Page = 1;
        await RefreshMatchList();
        StateHasChanged();
    }
    
    
    

    private async void AppStateOnNewMatchAdded()
    {
        await RefreshMatchList();
        await InvokeAsync(StateHasChanged);
    }

    public async Task ToggleCheck()
    {
        if (!worker.CancellationPending)
        {
            if (worker.IsBusy)
            {
                worker.CancelAsync();
            }
            else
            {
                worker.RunWorkerAsync();
            }
        }
        StateHasChanged();
    }

    private async Task PageChanged(int newPage)
    {
        Page = newPage;
        await RefreshMatchList();
        await InvokeAsync(StateHasChanged);
    }

}